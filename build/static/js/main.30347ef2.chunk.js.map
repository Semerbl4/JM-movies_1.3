{"version":3,"sources":["services/MoviesApiService.js","components/Filters/Filters.jsx","components/Search/Search.jsx","components/MovieCard/MovieCard.jsx","components/MoviesList/MoviesList.jsx","components/App/App.jsx","index.jsx"],"names":["MoviesApiService","getMovies","title","a","page","currentPage","fetch","movies","ok","json","Error","status","Filters","Search","moviesApiService","state","value","changedInput","inpValue","setState","target","prevProp","prevState","this","props","changeMovies","type","placeholder","onChange","debounce","event","React","Component","defaultProps","MovieCard","poster","releaseDate","rating","shortOverview","overview","split","slice","push","forPoster","className","src","alt","join","MoviesList","loading","size","map","el","original_title","poster_path","release_date","vote_average","id","App","moviesApiServise","error","totalPages","online","window","navigator","onLine","then","res","results","total_pages","catch","message","setCurrentPage","defaultCurrent","total","showSizeChanger","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30347ef2.chunk.js","sourcesContent":["class MoviesApiService {\n  getMovies = async (title, page = null) => {\n    let currentPage = page;\n\n    if (page) {\n      currentPage = `&page=${page}`;\n    } else {\n      currentPage = ``;\n    }\n\n    let movies = await fetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=c33f54366ccf34ec81775c2d46bea63e&query=${title}${currentPage}`\n    );\n    // console.log(movies)\n\n    if (movies.ok) {\n      movies = await movies.json();\n      // console.log(movies)\n      return movies;\n    }\n\n    throw new Error(movies.status);\n    // console.log(this.state)\n  };\n}\n\nexport default MoviesApiService;\n","import './Filters.css';\n\nimport React from 'react';\n\nconst Filters = () => (\n  <ul>\n    <li>Search</li>\n    <li>Rated</li>\n  </ul>\n);\n\nexport default Filters;\n","import './Search.css';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from 'lodash';\n\nimport MoviesApiService from '../../services/MoviesApiService';\n\nclass Search extends React.Component {\n  moviesApiService = new MoviesApiService();\n\n  state = {\n    value: '',\n  };\n\n  static defaultProps = {\n    changeMovies: () => {},\n    currentPage: 1,\n  };\n\n  static propTypes = {\n    changeMovies: PropTypes.func,\n    currentPage: PropTypes.number,\n  };\n\n  componentDidUpdate(prevProp, prevState) {\n    const { currentPage } = this.props;\n    const { value } = this.state;\n    const { changeMovies } = this.props;\n\n    if ((prevState.value !== value || prevProp.currentPage !== currentPage) && value !== '') {\n      changeMovies(value, currentPage);\n    }\n  }\n\n  changedInput = (inpValue) => {\n    this.setState({ value: inpValue.target.value });\n  };\n\n  render() {\n    return (\n      <input\n        type=\"text\"\n        placeholder=\"Type to search...\"\n        onChange={debounce((event) => {\n          this.changedInput(event);\n        }, 1000)}\n      />\n    );\n  }\n}\n\nexport default Search;\n","import './MovieCard.css';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst MovieCard = (props) => {\n  // const {key} = props\n\n  // console.log(props)\n\n  const { title, poster, releaseDate, rating, overview } = props;\n  const shortOverview = overview.split(' ').slice(0, 34);\n  shortOverview.push('...');\n\n  const posterLink = (forPoster) => {\n    if (poster === null) {\n      return null;\n    }\n    return `https://image.tmdb.org/t/p/w500${forPoster}`;\n  };\n\n  return (\n    <div className=\"movie-card\">\n      <img className=\"movie-card__poster\" src={posterLink(poster)} alt=\"Постер\" />\n      <div className=\"movie-card__information\">\n        <h5 className=\"movie-card__title\">{title}</h5>\n        <div className=\"movie-card__raiting\">\n          <p>{rating}</p>\n        </div>\n        <p className=\"movie-card__date\">{releaseDate}</p>\n        <ul className=\"mivie-card__categorys-list\" type=\"none\">\n          <li className=\"movie-card__category\">Драма</li>\n          <li className=\"movie-card__category\">Драма</li>\n        </ul>\n        <p className=\"movie-card__overview\">{shortOverview.join(' ')}</p>\n      </div>\n    </div>\n  );\n};\n\nMovieCard.defaultProps = {\n  releaseDate: 'Дата релиза неизвестна',\n  rating: 0,\n  overview: 'Описание отсутствует',\n  poster: null,\n};\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n\n  poster: PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.oneOf([null])]),\n\n  releaseDate: PropTypes.string,\n  rating: PropTypes.number,\n  overview: PropTypes.string,\n};\n\nexport default MovieCard;\n","import './MoviesList.css';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Spin } from 'antd';\nimport MovieCard from '../MovieCard/MovieCard';\n\nconst MoviesList = (props) => {\n  const { movies } = props;\n  const { loading } = props;\n\n  const createMovieCards = () => {\n    if (!movies) {\n      return null;\n    }\n\n    const movieCards = movies.map((el) => (\n      <li key={el.id} className=\"movie-list__item\">\n        <MovieCard\n          title={el.original_title}\n          overview={el.overview}\n          poster={el.poster_path}\n          releaseDate={el.release_date}\n          rating={el.vote_average}\n        />\n      </li>\n    ));\n    return movieCards;\n  };\n\n  if (loading) {\n    return <Spin size=\"large\" className=\"spin_scale\" />;\n  }\n\n  return (\n    <ul className=\"movies-list\" type=\"none\">\n      {createMovieCards()}\n    </ul>\n  );\n};\n\nMoviesList.defaultProps = {\n  movies: null,\n  loading: false,\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf([null])]),\n  loading: PropTypes.bool,\n};\n\nexport default MoviesList;\n","import './App.css';\nimport 'antd/dist/antd.css';\n\nimport React from 'react';\n\nimport { Alert, Pagination } from 'antd';\n\nimport MoviesApiService from '../../services/MoviesApiService';\n\nimport Filters from '../Filters/Filters';\nimport Search from '../Search/Search';\nimport MoviesList from '../MoviesList/MoviesList';\n\nexport default class App extends React.Component {\n  moviesApiServise = new MoviesApiService();\n\n  state = {\n    movies: null,\n    loading: false,\n    error: false,\n    totalPages: null,\n    currentPage: 1,\n  };\n\n  online = window.navigator.onLine;\n\n  changeMovies = (title, page) => {\n    this.setState((state) => ({\n      loading: !state.loading,\n      totalPages: null,\n    }));\n\n    this.moviesApiServise\n      .getMovies(title, page)\n      .then((res) => {\n        this.setState((state) => ({\n          movies: res.results,\n          loading: !state.loading,\n          totalPages: res.total_pages,\n        }));\n      })\n      .catch((res) => {\n        this.setState({ error: res.message });\n      });\n  };\n\n  setCurrentPage = (page) => {\n    // console.log(page)\n    this.setState({ currentPage: page });\n  };\n\n  render() {\n    const { movies } = this.state;\n    const { loading } = this.state;\n    const { error } = this.state;\n    const { totalPages } = this.state;\n    const { currentPage } = this.state;\n\n    // console.log(totalPages)\n\n    if (!this.online) {\n      return <Alert type=\"warning\" message=\"Ваш интернет приказал долго жить (Отсутствует соединение сети)\" />;\n    }\n\n    return (\n      <main className=\"app\">\n        <Filters />\n        <Search changeMovies={this.changeMovies} currentPage={currentPage} />\n        {error ? (\n          <Alert message={`Произошла ошибка ${error}`} type=\"error\" />\n        ) : (\n          <MoviesList movies={movies} loading={loading} />\n        )}\n        {!loading && movies ? (\n          <Pagination\n            className=\"pagination\"\n            defaultCurrent={currentPage}\n            total={totalPages * 10}\n            showSizeChanger={false}\n            onChange={(page) => {\n              this.setCurrentPage(page);\n            }}\n          />\n        ) : null}\n      </main>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}